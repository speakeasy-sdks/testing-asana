"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import asananamedresource as shared_asananamedresource
from ..shared import errorresponse as shared_errorresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from testing_2 import utils
from typing import Optional

class TypeaheadForWorkspaceResourceType(str, Enum):
    r"""The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `project_template`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported."""
    CUSTOM_FIELD = 'custom_field'
    PROJECT = 'project'
    PROJECT_TEMPLATE = 'project_template'
    PORTFOLIO = 'portfolio'
    TAG = 'tag'
    TASK = 'task'
    USER = 'user'

class TypeaheadForWorkspaceType(str, Enum):
    r"""*Deprecated: new integrations should prefer the resource_type field.*"""
    CUSTOM_FIELD = 'custom_field'
    PORTFOLIO = 'portfolio'
    PROJECT = 'project'
    TAG = 'tag'
    TASK = 'task'
    USER = 'user'



@dataclasses.dataclass
class TypeaheadForWorkspaceRequest:
    resource_type: TypeaheadForWorkspaceResourceType = dataclasses.field(metadata={'query_param': { 'field_name': 'resource_type', 'style': 'form', 'explode': True }})
    r"""The type of values the typeahead should return. You can choose from one of the following: `custom_field`, `project`, `project_template`, `portfolio`, `tag`, `task`, and `user`. Note that unlike in the names of endpoints, the types listed here are in singular form (e.g. `task`). Using multiple types is not yet supported."""
    workspace_gid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace_gid', 'style': 'simple', 'explode': False }})
    r"""Globally unique identifier for the workspace or organization."""
    count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""The number of results to return. The default is 20 if this parameter is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results found than requested, all will be returned."""
    opt_fields: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'opt_fields', 'style': 'form', 'explode': False }})
    r"""Defines fields to return.
    Some requests return *compact* representations of objects in order to conserve resources and complete the request more efficiently. Other times requests return more information than you may need. This option allows you to list the exact set of fields that the API should be sure to return for the objects. The field names should be provided as paths, described below.
    The id of included objects will always be returned, regardless of the field options.
    """
    opt_pretty: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'opt_pretty', 'style': 'form', 'explode': True }})
    r"""Provides “pretty” output.
    Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    """
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""The string that will be used to search for relevant objects. If an empty string is passed in, the API will return results."""
    type: Optional[TypeaheadForWorkspaceType] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""*Deprecated: new integrations should prefer the resource_type field.*"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class TypeaheadForWorkspace200ApplicationJSON:
    r"""A generic list of objects, such as those returned by the typeahead search endpoint."""
    data: Optional[list[shared_asananamedresource.AsanaNamedResource]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    




@dataclasses.dataclass
class TypeaheadForWorkspaceResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""This usually occurs because of a missing or malformed parameter. Check the documentation and the syntax of your request and try again."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    typeahead_for_workspace_200_application_json_object: Optional[TypeaheadForWorkspace200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successfully retrieved objects via a typeahead search algorithm."""
    

