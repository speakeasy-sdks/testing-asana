"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datevariablecompact as shared_datevariablecompact
from ..shared import teamcompact as shared_teamcompact
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from testing_2 import utils
from typing import Optional

class ProjectTemplateBaseColor(str, Enum):
    r"""Color of the project template."""
    DARK_PINK = 'dark-pink'
    DARK_GREEN = 'dark-green'
    DARK_BLUE = 'dark-blue'
    DARK_RED = 'dark-red'
    DARK_TEAL = 'dark-teal'
    DARK_BROWN = 'dark-brown'
    DARK_ORANGE = 'dark-orange'
    DARK_PURPLE = 'dark-purple'
    DARK_WARM_GRAY = 'dark-warm-gray'
    LIGHT_PINK = 'light-pink'
    LIGHT_GREEN = 'light-green'
    LIGHT_BLUE = 'light-blue'
    LIGHT_RED = 'light-red'
    LIGHT_TEAL = 'light-teal'
    LIGHT_BROWN = 'light-brown'
    LIGHT_ORANGE = 'light-orange'
    LIGHT_PURPLE = 'light-purple'
    LIGHT_WARM_GRAY = 'light-warm-gray'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ProjectTemplateBaseOwner:
    r"""A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks."""
    gid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gid'), 'exclude': lambda f: f is None }})
    r"""Globally unique identifier of the resource, as a string."""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""*Read-only except when same user as requester*. The userâ€™s name."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_type'), 'exclude': lambda f: f is None }})
    r"""The base type of this resource."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ProjectTemplateBase:
    r"""A *project template* is an object that allows new projects to be created with a predefined setup, which may include tasks, sections, Rules, etc. It simplifies the process of running a workflow that involves a similar set of work every time."""
    color: Optional[ProjectTemplateBaseColor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""Color of the project template."""
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Free-form textual information associated with the project template"""
    gid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gid'), 'exclude': lambda f: f is None }})
    r"""Globally unique identifier of the resource, as a string."""
    html_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_description'), 'exclude': lambda f: f is None }})
    r"""The description of the project template with formatting as HTML."""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the project template."""
    owner: Optional[ProjectTemplateBaseOwner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""The current owner of the project template, may be null."""
    public: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public'), 'exclude': lambda f: f is None }})
    r"""True if the project template is public to its team."""
    requested_dates: Optional[list[shared_datevariablecompact.DateVariableCompact]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requested_dates'), 'exclude': lambda f: f is None }})
    r"""Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_type'), 'exclude': lambda f: f is None }})
    r"""The base type of this resource."""
    team: Optional[shared_teamcompact.TeamCompact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team'), 'exclude': lambda f: f is None }})
    

