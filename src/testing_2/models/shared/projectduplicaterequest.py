"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from testing_2 import utils
from typing import Optional

class ProjectDuplicateRequestInclude(str, Enum):
    r"""The elements that will be duplicated to the new project. Tasks are always included."""
    MEMBERS = 'members'
    NOTES = 'notes'
    FORMS = 'forms'
    TASK_NOTES = 'task_notes'
    TASK_ASSIGNEE = 'task_assignee'
    TASK_SUBTASKS = 'task_subtasks'
    TASK_ATTACHMENTS = 'task_attachments'
    TASK_DATES = 'task_dates'
    TASK_DEPENDENCIES = 'task_dependencies'
    TASK_FOLLOWERS = 'task_followers'
    TASK_TAGS = 'task_tags'
    TASK_PROJECTS = 'task_projects'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ProjectDuplicateRequestScheduleDates:
    r"""A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both."""
    should_skip_weekends: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('should_skip_weekends') }})
    r"""Determines if the auto-shifted dates should skip weekends."""
    due_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('due_on'), 'exclude': lambda f: f is None }})
    r"""Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project."""
    start_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_on'), 'exclude': lambda f: f is None }})
    r"""Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ProjectDuplicateRequest:
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the new project."""
    include: Optional[ProjectDuplicateRequestInclude] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('include'), 'exclude': lambda f: f is None }})
    r"""The elements that will be duplicated to the new project. Tasks are always included."""
    schedule_dates: Optional[ProjectDuplicateRequestScheduleDates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule_dates'), 'exclude': lambda f: f is None }})
    r"""A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both."""
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team'), 'exclude': lambda f: f is None }})
    r"""Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project."""
    

