"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from testing_2 import utils
from typing import Optional



@dataclasses.dataclass
class BatchRequestActionData:
    r"""For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body."""
    


class BatchRequestActionMethod(str, Enum):
    r"""The HTTP method you wish to emulate for the action."""
    GET = 'get'
    POST = 'post'
    PUT = 'put'
    DELETE = 'delete'
    PATCH = 'patch'
    HEAD = 'head'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class BatchRequestActionOptions:
    r"""Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request."""
    fields_: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""The fields to retrieve in the request."""
    limit: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limit'), 'exclude': lambda f: f is None }})
    r"""Pagination limit for the request."""
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offset'), 'exclude': lambda f: f is None }})
    r"""Pagination offset for the request."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class BatchRequestAction:
    r"""An action object for use in a batch request."""
    method: BatchRequestActionMethod = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method') }})
    r"""The HTTP method you wish to emulate for the action."""
    relative_path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relative_path') }})
    r"""The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead."""
    data: Optional[BatchRequestActionData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body."""
    options: Optional[BatchRequestActionOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request."""
    

