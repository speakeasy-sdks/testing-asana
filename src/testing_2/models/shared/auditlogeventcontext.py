"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from testing_2 import utils
from typing import Optional

class AuditLogEventContextAPIAuthenticationMethod(str, Enum):
    r"""The authentication method used in the context of an API request.
    Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
    """
    COOKIE = 'cookie'
    OAUTH = 'oauth'
    PERSONAL_ACCESS_TOKEN = 'personal_access_token'
    SERVICE_ACCOUNT = 'service_account'

class AuditLogEventContextContextType(str, Enum):
    r"""The type of context.
    Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
    """
    WEB = 'web'
    DESKTOP = 'desktop'
    MOBILE = 'mobile'
    ASANA_SUPPORT = 'asana_support'
    ASANA = 'asana'
    EMAIL = 'email'
    API = 'api'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class AuditLogEventContext:
    r"""The context from which this event originated."""
    api_authentication_method: Optional[AuditLogEventContextAPIAuthenticationMethod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_authentication_method'), 'exclude': lambda f: f is None }})
    r"""The authentication method used in the context of an API request.
    Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
    """
    client_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_ip_address'), 'exclude': lambda f: f is None }})
    r"""The IP address of the client that initiated the event, if applicable."""
    context_type: Optional[AuditLogEventContextContextType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context_type'), 'exclude': lambda f: f is None }})
    r"""The type of context.
    Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
    """
    oauth_app_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth_app_name'), 'exclude': lambda f: f is None }})
    r"""The name of the OAuth App that initiated the event.
    Only present if the `api_authentication_method` is `oauth`.
    """
    user_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_agent'), 'exclude': lambda f: f is None }})
    r"""The user agent of the client that initiated the event, if applicable."""
    

