"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from testing_2 import utils
from typing import Optional

class StoryRequestStickerName(str, Enum):
    r"""The name of the sticker in this story. `null` if there is no sticker."""
    GREEN_CHECKMARK = 'green_checkmark'
    PEOPLE_DANCING = 'people_dancing'
    DANCING_UNICORN = 'dancing_unicorn'
    HEART = 'heart'
    PARTY_POPPER = 'party_popper'
    PEOPLE_WAVING_FLAGS = 'people_waving_flags'
    SPLASHING_NARWHAL = 'splashing_narwhal'
    TROPHY = 'trophy'
    YETI_RIDING_UNICORN = 'yeti_riding_unicorn'
    CELEBRATING_PEOPLE = 'celebrating_people'
    DETERMINED_CLIMBERS = 'determined_climbers'
    PHOENIX_SPREADING_LOVE = 'phoenix_spreading_love'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class StoryRequestInput:
    r"""A story represents an activity associated with an object in the Asana system."""
    html_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_text'), 'exclude': lambda f: f is None }})
    r"""[Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator."""
    is_pinned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_pinned'), 'exclude': lambda f: f is None }})
    r"""*Conditional*. Whether the story should be pinned on the resource."""
    sticker_name: Optional[StoryRequestStickerName] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sticker_name'), 'exclude': lambda f: f is None }})
    r"""The name of the sticker in this story. `null` if there is no sticker."""
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The plain text of the comment to add. Cannot be used with html_text."""
    

