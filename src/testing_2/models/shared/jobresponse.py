"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import projectcompact as shared_projectcompact
from ..shared import projecttemplatecompact as shared_projecttemplatecompact
from ..shared import taskcompact as shared_taskcompact
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from testing_2 import utils
from typing import Optional

class JobResponseStatus(str, Enum):
    r"""The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`."""
    NOT_STARTED = 'not_started'
    IN_PROGRESS = 'in_progress'
    SUCCEEDED = 'succeeded'
    FAILED = 'failed'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class JobResponse:
    r"""A *job* is an object representing a process that handles asynchronous work."""
    gid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gid'), 'exclude': lambda f: f is None }})
    r"""Globally unique identifier of the resource, as a string."""
    new_project: Optional[shared_projectcompact.ProjectCompact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_project'), 'exclude': lambda f: f is None }})
    new_project_template: Optional[shared_projecttemplatecompact.ProjectTemplateCompact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_project_template'), 'exclude': lambda f: f is None }})
    new_task: Optional[shared_taskcompact.TaskCompact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_task'), 'exclude': lambda f: f is None }})
    resource_subtype: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_subtype'), 'exclude': lambda f: f is None }})
    r"""The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning."""
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_type'), 'exclude': lambda f: f is None }})
    r"""The base type of this resource."""
    status: Optional[JobResponseStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`."""
    

