"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import asananamedresource as shared_asananamedresource
from ..shared import usercompact as shared_usercompact
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from testing_2 import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EventResponseChange:
    r"""Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`."""
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change."""
    added_value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_value'), 'exclude': lambda f: f is None }})
    r"""*Conditional.* This property is only present when the **field's** `action` is `added` _and_ the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint."""
    field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field'), 'exclude': lambda f: f is None }})
    r"""The name of the field that has changed in the resource."""
    new_value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('new_value'), 'exclude': lambda f: f is None }})
    r"""*Conditional.* This property is only present when the **field's** `action` is `changed` _and_ the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint."""
    removed_value: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('removed_value'), 'exclude': lambda f: f is None }})
    r"""*Conditional.* This property is only present when the **field's** `action` is `removed` _and_ the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class EventResponse:
    r"""An *event* is an object representing a change to a resource that was
    observed by an event subscription or delivered asynchronously to
    the target location of an active webhook.

    The event may be triggered by a different `user` than the
    subscriber. For example, if user A subscribes to a task and user B
    modified it, the eventâ€™s user will be user B. Note: Some events
    are generated by the system, and will have `null` as the user. API
    consumers should make sure to handle this case.

    The `resource` that triggered the event may be different from the one
    that the events were requested for or the webhook is subscribed to. For
    example, a subscription to a project will contain events for tasks
    contained within the project.

    **Note:** pay close attention to the relationship between the fields
    `Event.action` and `Event.change.action`.
    `Event.action` represents the action taken on the resource
    itself, and `Event.change.action` represents how the information
    within the resource's fields have been modified.

    For instance, consider these scenarios:


    * When at task is added to a project, `Event.action` will be
    `added`, `Event.parent` will be an object with the `id` and
    `type` of the project, and there will be no `change` field.


    * When an assignee is set on the task, `Event.parent` will be
    `null`, `Event.action` will be `changed`,
    `Event.change.action` will be `changed`, and `new_value` will
    be an object with the user's `id` and `type`.


    * When a collaborator is added to the task, `Event.parent` will
    be `null`, `Event.action` will be `changed`,
    `Event.change.action` will be `added`, and `added_value` will be
    an object with the user's `id` and `type`.
    """
    action: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event."""
    change: Optional[EventResponseChange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('change'), 'exclude': lambda f: f is None }})
    r"""Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`."""
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The timestamp when the event occurred."""
    parent: Optional[shared_asananamedresource.AsanaNamedResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parent'), 'exclude': lambda f: f is None }})
    resource: Optional[shared_asananamedresource.AsanaNamedResource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource'), 'exclude': lambda f: f is None }})
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""*Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event."""
    user: Optional[shared_usercompact.UserCompact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    

