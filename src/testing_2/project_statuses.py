"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from testing_2 import utils
from testing_2.models import operations, shared
from typing import Optional

class ProjectStatuses:
    r"""*Deprecated: new integrations should prefer using [status updates](/docs/asana-statuses)*
    
    A project status is an update on the progress of a particular project,
    and is sent out to all project followers when created. These updates
    include both text describing the update and a color code intended to
    represent the overall state of the project: \"green\" for projects that
    are on track, \"yellow\" for projects at risk, \"red\" for projects that
    are behind, and \"blue\" for projects on hold.
    
    Project statuses can be created and deleted, but not modified.
    """
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def create_project_status_for_project(self, request: operations.CreateProjectStatusForProjectRequest) -> operations.CreateProjectStatusForProjectResponse:
        r"""Create a project status
        *Deprecated: new integrations should prefer the `/status_updates` route.*
        
        Creates a new status update on the project.
        
        Returns the full record of the newly created project status update.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.CreateProjectStatusForProjectRequest, base_url, '/projects/{project_gid}/project_statuses', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.CreateProjectStatusForProjectRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProjectStatusForProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateProjectStatusForProject201ApplicationJSON])
                res.create_project_status_for_project_201_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    
    def delete_project_status(self, request: operations.DeleteProjectStatusRequest) -> operations.DeleteProjectStatusResponse:
        r"""Delete a project status
        *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
        
        Deletes a specific, existing project status update.
        
        Returns an empty data record.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.DeleteProjectStatusRequest, base_url, '/project_statuses/{project_status_gid}', request)
        headers = {}
        query_params = utils.get_query_params(operations.DeleteProjectStatusRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProjectStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteProjectStatus200ApplicationJSON])
                res.delete_project_status_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    
    def get_project_status(self, request: operations.GetProjectStatusRequest) -> operations.GetProjectStatusResponse:
        r"""Get a project status
        *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*
        
        Returns the complete record for a single status update.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectStatusRequest, base_url, '/project_statuses/{project_status_gid}', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetProjectStatusRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectStatus200ApplicationJSON])
                res.get_project_status_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    
    def get_project_statuses_for_project(self, request: operations.GetProjectStatusesForProjectRequest) -> operations.GetProjectStatusesForProjectResponse:
        r"""Get statuses from a project
        *Deprecated: new integrations should prefer the `/status_updates` route.*
        
        Returns the compact project status update records for all updates on the project.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetProjectStatusesForProjectRequest, base_url, '/projects/{project_gid}/project_statuses', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetProjectStatusesForProjectRequest, request)
        headers['Accept'] = 'application/json;q=1, application/json;q=0'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProjectStatusesForProjectResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProjectStatusesForProject200ApplicationJSON])
                res.get_project_statuses_for_project_200_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    